name: GITFLOW-2

on:
  push:
    branches:
      - main 

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setting up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # - name: Create Environment File
      #   run: |
      #     touch .env
      #     echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
      #     echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
      #     echo "DB_USER=${{secrets.DB_USER}}" >> .env
      #     echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
      #     echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
      #     echo "DIALECT=${{secrets.DIALECT}}" >> .env
      #     echo "DEFAULTUSERPATH=${{secrets.DEFAULTUSERPATH}}" >> .env

      - name: Create user.csv
        run: |
          touch user.csv
          echo "${{secrets.USER_CSV}}" >> user.csv

      - name: Building webapp application artifact 
        if: success()
        run: zip -r webapp.zip .

      - name: Configuring AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Initialize packer configuration
        run: packer init webapp.pkr.hcl

      - name: Build AMI with Packer
        run: packer build webapp.pkr.hcl
        env:
          PKR_VAR_database_pass: ${{secrets.DB_PASSWORD}} 
          PKR_VAR_database_user: ${{secrets.DB_USER}}
          PKR_VAR_database_host: ${{secrets.DB_HOST}} 
          PKR_VAR_aws_region: "${{secrets.AWS_REGION}}"
          PKR_VAR_source_ami: "${{secrets.SOURCE_AMI}}"
          PKR_VAR_subnet_id: "${{secrets.SUBNET_ID}}"

      - name: Extract AMI ID
        run: |
          NEW_AMI=$(packer build webapp.pkr.hcl 2>&1 | grep -oP 'ami-\w+')

      # Configure AWS credentials for the demo account
      - name: Configuring AWS credentials for demo account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          aws-region: us-west-2 # replace with your demo account region

      # Create New Launch Template Version in the Demo account
      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version --launch-template-name webapp-launchtemplate --launch-template-data "{\"ImageId\":\"${{ env.NEW_AMI }}\"}"

      # Update Autoscaling Group with the new Launch Template version
      - name: Update Autoscaling Group
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name webapp-autoscaling --launch-template "{\"Version\":\"$TEMPLATE_VERSION\"}"

      # Instance Refresh for the Autoscaling Group
      - name: Instance Refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webapp-autoscaling

      # # Wait for Instance Refresh Completion
      # - name: Wait for Instance Refresh
      #   run: |
      #     # Add your script/logic here to wait for instance refresh to complete
